#!/bin/sh
#==============================================================================
#       _                 _
#      | |               | |
#    __| |_ __ ___    ___| |__
#   / _` | '_ ` _ \  / __| '_ \
#  | (_| | | | | | |_\__ \ | | |
#   \__,_|_| |_| |_(_)___/_| |_|
#
#==============================================================================

#==============================================================================
# SANE ENVIRONMENT
#==============================================================================

set -e  # Exit on error.
set -u  # Unbound variable safe guard.

#==============================================================================
# INITIAL PATH CHANGE
#==============================================================================

DM__GLOBAL__RUNTIME__PATH="$(dirname "$(readlink -f "$0")")"
cd "${DM__GLOBAL__RUNTIME__PATH}"

#==============================================================================
# LOAD EXTERNAL LIBRARIES
#==============================================================================

DM__GLOBAL__RUNTIME__DM_REPO_ROOT=".."
# shellcheck source=./dm.lib.sh
. "${DM__GLOBAL__RUNTIME__DM_REPO_ROOT}/src/dm.lib.sh"

#==============================================================================
# GLOBAL SCRIPT BASED VARIABLES
#==============================================================================

DM__GLOBAL__RUNTIME__VERSION=$(cat "${DM__GLOBAL__RUNTIME__PATH}/../VERSION")

#==============================================================================
# WARNING MESSAGES
#==============================================================================

DM__GLOBAL__WARNING__MODULE_DOC_WRAPPING="$( \
  echo "
    Consider reformatting the module's documentation to not to exceed the
    predefined character line length and prevent automatic line wrapping. You
    can turn off this warning by modifying your main Makefile in the config
    section [DM_CONFIG__WARNING__WRAPPED_DOCS].
  " | _dm_cli__normalize_multiline_string \
)"

#==============================================================================
# COMMAND LINE ARGUMENTS
#==============================================================================

# Relative path to the modules directory relative to this file. It is
# calculated during installation by the install script.
DM__GLOBAL__RUNTIME__MODULES_ROOT="$1"

# Temporary parameters file path that is generated by the Makefile target
# before calling this script by writing the user editable parameters to the
# temporary parameter file in a specific order. It is important to keep this
# order in sync between the Makefile and this script. This script has to delete
# the temporary file after getting all parameters from it.
DM__PARAMETER_FILE_PATH="$2"

# Flag that is passed from the Makefile to signal that global debugging is
# enabled. If the value is not `0`, then the debug messages will be printed to
# the standard error output of the dm process.
DM__GLOBAL__RUNTIME__DEBUG_ENABLED="$3"

#==============================================================================
# PARAMETER FILE PARSING
#==============================================================================
# Based on the given temporary parameter file generated by the Makefile before
# calling this script, the used editable parameters has to be read. This is a
# relative effitient way to pass parameters without the fear of abusing the
# arguments list of this script..

# PARAMETER 1
#------------------------------------------------------------------------------
# Global text wrapping limit. Every function that prints to the console has to
# respect this limit.
DM__GLOBAL__CONFIG__CLI__TEXT_WRAP_LIMIT_DEFAULT="80"
DM__GLOBAL__CONFIG__CLI__TEXT_WRAP_LIMIT="$( \
  dm_lib__config__load_parameter \
    "1" \
    "$DM__GLOBAL__CONFIG__CLI__TEXT_WRAP_LIMIT_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 2
#------------------------------------------------------------------------------
# Default command indentation amount for functions that prints out left aligned
# text.
DM__GLOBAL__CONFIG__CLI__INDENT_AMOUNT_DEFAULT="4"
DM__GLOBAL__CONFIG__CLI__INDENT_AMOUNT="$( \
  dm_lib__config__load_parameter \
    "2" \
    "$DM__GLOBAL__CONFIG__CLI__INDENT_AMOUNT_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"
# Cached variable for the default indentation.
DM__GLOBAL__CONFIG__CLI__INDENT="$( \
  printf "%${DM__GLOBAL__CONFIG__CLI__INDENT_AMOUNT}s" "" \
)"

# PARAMETER 3
#------------------------------------------------------------------------------
# Prompt for the dotmodules interpreter. It will be highlighted with the
# predefined prompt color.
DM__GLOBAL__CONFIG__CLI__PROMPT_TEMPLATE_DEFAULT="<<space>><<bold>>dm<<reset>> #<<space>>"
DM__GLOBAL__CONFIG__CLI__PROMPT_TEMPLATE="$( \
  dm_lib__config__load_parameter \
    "3" \
    "$DM__GLOBAL__CONFIG__CLI__PROMPT_TEMPLATE_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 4
#------------------------------------------------------------------------------
# Exit command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__EXIT_DEFAULT="q|quit|exit"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__EXIT="$( \
  dm_lib__config__load_parameter \
    "4" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__EXIT_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 5
#------------------------------------------------------------------------------
# Help command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HELP_DEFAULT="?|help"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HELP="$( \
  dm_lib__config__load_parameter \
    "5" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HELP_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 6
#------------------------------------------------------------------------------
# Version command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VERSION_DEFAULT="version"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VERSION="$( \
  dm_lib__config__load_parameter \
    "6" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VERSION_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 7
#------------------------------------------------------------------------------
# Variables command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VARIABLES_DEFAULT="v|variables"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VARIABLES="$( \
  dm_lib__config__load_parameter \
    "7" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VARIABLES_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 8
#------------------------------------------------------------------------------
# Hooks command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HOOKS_DEFAULT="h|hooks"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HOOKS="$( \
  dm_lib__config__load_parameter \
    "8" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HOOKS_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 9
#------------------------------------------------------------------------------
# Signals command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__SIGNALS_DEFAULT="s|signals"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__SIGNALS="$( \
  dm_lib__config__load_parameter \
    "9" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__SIGNALS_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 10
#------------------------------------------------------------------------------
# Modules command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__MODULES_DEFAULT="m|modules"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__MODULES="$( \
  dm_lib__config__load_parameter \
    "10" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__MODULES_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 11
#------------------------------------------------------------------------------
# Deploy command hotkeys.
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__DEPLOY_DEFAULT="d|deploy"
DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__DEPLOY="$( \
  dm_lib__config__load_parameter \
    "11" \
    "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__DEPLOY_DEFAULT" \
    "$DM__PARAMETER_FILE_PATH" \
)"

# PARAMETER 12
#------------------------------------------------------------------------------
# Warning supressor flag that controls the appearance of the waring issued if a
# module documentation line exceeds the global wrapping limit. Setting this
# variable to 0 will disable the warning.
DM__GLOBAL__CONFIG__CLI__WARNING__WRAPPED_DOCS_DEFAULT="1"
DM__GLOBAL__CONFIG__CLI__WARNING__WRAPPED_DOCS="$( \
  dm_lib__config__load_parameter \
  "12" \
  "$DM__GLOBAL__CONFIG__CLI__WARNING__WRAPPED_DOCS_DEFAULT" \
  "$DM__PARAMETER_FILE_PATH" \
)"

# Removing the parameters passing file right after the parsing.
rm "$DM__PARAMETER_FILE_PATH"

#==============================================================================
# INITIALIZATION
#==============================================================================
#   _____       _ _   _       _ _          _   _
#  |_   _|     (_) | (_)     | (_)        | | (_)
#    | |  _ __  _| |_ _  __ _| |_ ______ _| |_ _  ___  _ __
#    | | | '_ \| | __| |/ _` | | |_  / _` | __| |/ _ \| '_ \
#   _| |_| | | | | |_| | (_| | | |/ / (_| | |_| | (_) | | | |
#  |_____|_| |_|_|\__|_|\__,_|_|_/___\__,_|\__|_|\___/|_| |_|
#
#==============================================================================

#==============================================================================
# Main system initialization function that is responsible to start everything
# except the cli interpreter.
#==============================================================================
# INPUT
#==============================================================================
# Global variables
# - DM__GLOBAL__RUNTIME__DEBUG_ENABLED
# Arguments
# - None
# StdIn
# - None
#==============================================================================
# OUTPUT
#==============================================================================
# Output variables
# - None
# StdOut
# - None
# StdErr
# - Error that occured during operation.
# Status
# -  0 : ok
# - !0 : error
#==============================================================================
dm_cli__init() {
  dm_lib__debug "dm_cli__init" "initialization started"
  dm_cli__initialize_prompt
  dm_cli__welcome_message

  dm_lib__cache__init

  # Modules needs to be loaded first in order to be able to load others. This
  # has to be done in a synchronized way.
  dm_lib__modules__load

  # Running the longer tasks synchronously when debugging to have a better
  # behaving printout. Without this the different tasks debug messages could
  # mix and the prompt would also get lost in the debug messages.
  if [ "$DM__GLOBAL__RUNTIME__DEBUG_ENABLED" -eq "0" ]
  then
    dm_lib__variables__load &
    dm_lib__hooks__load &
  else
    dm_lib__variables__load
    dm_lib__hooks__load
  fi

  dm_lib__debug "dm_cli__init" "initialization finished"
}

#==============================================================================
# Prints out a simple welcome message if the global welcome message flag is
# set.
#==============================================================================
# INPUT
#==============================================================================
# Global variables
# - DM__GLOBAL__RUNTIME__VERSION
# Arguments
# - None
# StdIn
# - None
#==============================================================================
# OUTPUT
#==============================================================================
# Output variables
# - None
# StdOut
# - None
# StdErr
# - Error that occured during operation.
# Status
# -  0 : ok
# - !0 : error
#==============================================================================
dm_cli__welcome_message() {
  echo " ${BOLD}dotmodules${RESET} ${DIM}v${DM__GLOBAL__RUNTIME__VERSION}${RESET}"
}

#==============================================================================
# Formats the raw prompt template by replacing the template keywords with the
# proper values. This has to be executed this way, because we don't want to use
# exec to replace the shell variables that would be passed from the Makefile.
# In this way there is no security risk while having a fully customizable
# prompt.
#==============================================================================
# INPUT
#==============================================================================
# Global variables
# - DM__GLOBAL__CONFIG__CLI__PROMPT_TEMPLATE
# Arguments
# - None
# StdIn
# - None
#==============================================================================
# OUTPUT
#==============================================================================
# Output variables
# - DM__GLOBAL__CLI__PROMPT
# StdOut
# - None
# StdErr
# - Error that occured during operation.
# Status
# -  0 : ok
# - !0 : error
#==============================================================================
dm_cli__initialize_prompt() {
  DM__GLOBAL__CLI__PROMPT="$(
    echo "$DM__GLOBAL__CONFIG__CLI__PROMPT_TEMPLATE" | \
      sed -e "s/<<space>>/ /g" | \
      sed -e "s/<<red>>/${RED}/g" | \
      sed -e "s/<<green>>/${GREEN}/g" | \
      sed -e "s/<<yellow>>/${YELLOW}/g" | \
      sed -e "s/<<blue>>/${BLUE}/g" | \
      sed -e "s/<<magenta>>/${MAGENTA}/g" | \
      sed -e "s/<<cyan>>/${CYAN}/g" | \
      sed -e "s/<<bold>>/${BOLD}/g" | \
      sed -e "s/<<dim>>/${DIM}/g" | \
      sed -e "s/<<reset>>/${RESET}/g" \
  )"
}

#==============================================================================
#    ____ _     ___    ____                                          _
#   / ___| |   |_ _|  / ___|___  _ __ ___  _ __ ___   __ _ _ __   __| |___
#  | |   | |    | |  | |   / _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` / __|
#  | |___| |___ | |  | |__| (_) | | | | | | | | | | | (_| | | | | (_| \__ \
#   \____|_____|___|  \____\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|___/
#
#==============================================================================

#==============================================================================
# COMMAND: EXIT
#==============================================================================
#   _____      _ _
#  | ____|_  _(_) |_
#  |  _| \ \/ / | __|
#  | |___ >  <| | |_
#  |_____/_/\_\_|\__|
#
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__EXIT" \
  "dm_cli__interpreter_quit" \
  "Exits the dotmodules interpreter."
dm_cli__interpreter_quit() {
  dm_lib__debug "dm_cli__interpreter_quit" \
    "interpreter quit called, setting exit condition.."
  DM__GLOBAL__CLI__EXIT_CONDITION="1"
}

#==============================================================================
# COMMAND: HELP
#==============================================================================
#   _   _      _
#  | | | | ___| |_ __
#  | |_| |/ _ \ | '_ \
#  |  _  |  __/ | |_) |
#  |_| |_|\___|_| .__/
#               |_|
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HELP" \
  "dm_cli__help" \
  "Prints out this help message. This is the default command."
dm_cli__register_default_command "dm_cli__help"
dm_cli__help() {
  echo ""
  echo "$DM_CLI__RUNTIME__REGISTERED_COMMAND_DOCS" | sed '/^[[:space:]]*$/d' | while read -r line
  do
    hotkeys="${line%% *}"  # getting the first element from the list
    doc="${line#* }"  # getting all items but the first

    header_padding="14"
    format="${BOLD}${CYAN}%${header_padding}s${RESET} %s\n"

    _dm_cli__utils__header_multiline \
      "$header_padding" \
      "$format" \
      "$hotkeys" \
      "$doc"
  done
  echo ""
}

#==============================================================================
# COMMAND: VERSION
#==============================================================================
#  __     __            _
#  \ \   / /__ _ __ ___(_) ___  _ __
#   \ \ / / _ \ '__/ __| |/ _ \| '_ \
#    \ V /  __/ |  \__ \ | (_) | | | |
#     \_/ \___|_|  |___/_|\___/|_| |_|
#
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VERSION" \
  "dm_cli__version" \
  "Prints out the dotmodules version."
dm_cli__version() {
  echo ""
  echo "${BOLD}dotmodules${RESET} ${DIM}v${DM__GLOBAL__RUNTIME__VERSION}${RESET}" | _dm_cli__utils__indent
  echo ""
}

#==============================================================================
# COMMAND: VARIABLES
#==============================================================================
#  __     __         _       _     _
#  \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___
#   \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
#    \ V / (_| | |  | | (_| | |_) | |  __/\__ \
#     \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
#
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__VARIABLES" \
  "dm_cli__list_variables" \
  "Prints out all collected variables."
dm_cli__list_variables() {
  dm_lib__debug "dm_cli__list_variables" \
    "displaying the content of the full variable cache.."
  echo ""

  header_padding="$(_dm_cli__list_variables__calculate_padding)"

  dm_lib__variables__get_all | while read -r line
  do
    variable_name="$(echo "$line" | _dm_lib__utils__trim_list 1)"
    values="$(echo "$line" | _dm_lib__utils__trim_list 2-)"

    format="${BOLD}%${header_padding}s${RESET} %s\n"

    _dm_cli__utils__header_multiline \
      "$header_padding" \
      "$format" \
      "$variable_name" \
      "$values"
  done

  echo ""
}

_dm_cli__list_variables__calculate_padding() {
  max_varibale_name_length="$(dm_lib__variables__get_max_variable_name_length)"
  dm_lib__debug "_dm_cli__list_variables__calculate_padding" \
    "max variable name length: '${max_varibale_name_length}'"

  padding="$(( max_varibale_name_length + DM__GLOBAL__CONFIG__CLI__INDENT_AMOUNT ))"

  dm_lib__debug "_dm_cli__list_variables__calculate_padding" \
    "calculated variable padding: '${padding}'"

  echo "$padding"
}

#==============================================================================
# COMMAND: HOOKS
#==============================================================================
#   _   _             _
#  | | | | ___   ___ | | _____
#  | |_| |/ _ \ / _ \| |/ / __|
#  |  _  | (_) | (_) |   <\__ \
#  |_| |_|\___/ \___/|_|\_\___/
#
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__HOOKS" \
  "dm_cli__list_hooks" \
  "Prints out all registered hooks sorted by priority."
dm_cli__list_hooks() {
  dm_lib__debug \
    "dm_cli__list_hooks" \
    "gathering registered hooks.."
  echo ""

  max_signal_length="$(dm_lib__hooks__get_max_signal_name_length)"
  max_priority_length="$(dm_lib__hooks__get_max_priority_number_length)"

  dm_lib__hooks__get_all | while read -r hook
  do
    signal="${hook%% *}"  # getting the first element from the list
    remaining="${hook#* }"  # getting all items but the first
    priority="${remaining%% *}"  # getting the first element from the list
    path="${remaining#* }"  # getting all items but the first

    # Indicating with red that a path is invalid.
    if [ -f "$path" ]
    then
      formatted_path="${path}"
    else
      dm_lib__debug \
        "dm_cli__list_hooks" \
        "file with path '${path}' does not extist, flagging it"
      formatted_path="${RED}${path}${RESET}"
    fi

    # shellcheck disable=SC2059
    printf \
      "${BOLD}%${max_signal_length}s ${BLUE}%${max_priority_length}s${RESET} %s\n" \
      "$signal" \
      "$priority" \
      "$formatted_path" | \
      _dm_cli__utils__indent
  done

  echo ""
}

#==============================================================================
# COMMAND: SIGNALS
#==============================================================================
#   ____  _                   _
#  / ___|(_) __ _ _ __   __ _| |___
#  \___ \| |/ _` | '_ \ / _` | / __|
#   ___) | | (_| | | | | (_| | \__ \
#  |____/|_|\__, |_| |_|\__,_|_|___/
#           |___/
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__SIGNALS" \
  "dm_cli__list_signals" \
  "Prints out all registered hooks sorted by priority."
dm_cli__list_signals() {
  dm_lib__debug "dm_cli__list_signals" \
    "gathering registered signals.."
  echo ""

  if [ "$#" = "0" ]
  then
    _dm_cli__list_signals | column --table --separator ":" | _dm_cli__utils__indent
  else
    index="$1"
    _dm_cli__signals__execute_signal "$index"
  fi

  echo ""
}

_dm_cli__list_signals() {
  _index=1
  signals=$(dm_lib__hooks__get_signal_names)
  for signal in $signals
  do
    index="${DIM}[${_index}]${RESET}"
    signal="${BOLD}${signal}${RESET}"
    echo "${index}:${signal}"
    _index=$((_index + 1))
  done
}

_dm_cli__signals__execute_signal() {
  selected_index="$1"

  if signal="$(dm_lib__hooks__signal_for_index "$selected_index")"
  then
    :
  else
    signal_count="$(dm_lib__hooks__get_signal_names | wc -l)"
    echo "${RED}Invalid signal index! Should be in range 1-${signal_count}.${RESET}" | \
      _dm_cli__utils__indent
    return
  fi

  dm_lib__debug "_dm_cli__execute_signal" "selected signal: '${signal}'"

  echo "Select scope for signal ${BOLD}${signal}${RESET}." | _dm_cli__utils__indent
  echo ""
  _dm_cli__signals__print_scope_choices | _dm_cli__utils__indent | _dm_cli__utils__indent
  echo ""
  printf "%s" "Scope: " | _dm_cli__utils__indent
  read -r context

  echo "imre: ${context}"
}

_dm_cli__signals__print_scope_choices() {
  index_width="$(dm_lib__modules__get_width__index)"
  name_width="$(dm_lib__modules__get_width__name)"

  # Offsetting the width to have a more spacy display.
  index_width="$((index_width + 3))"
  name_width="$((name_width + 1))"

  # Templates for the formatting.
  index_t="${DIM}%-${index_width}s${RESET}"
  name_t="${BOLD}%-${name_width}s${RESET}"
  path_t="%s"

  # shellcheck disable=SC2059
  printf "${index_t} ${BLUE}%s${RESET}\n" \
    "[a]" \
    "All modules"

  echo ""

  index=1

  modules=$(dm_lib__modules__list)
  for module in $modules
  do
    index_value="[${index}]"
    name_value="$(dm_lib__modules__get_name "$module")"
    path_value="$module"


    # shellcheck disable=SC2059
    printf "${index_t} ${name_t} ${path_t}\n" \
      "$index_value" \
      "$name_value" \
      "$path_value"

    index=$((index + 1))
  done

  echo ""

  # shellcheck disable=SC2059
  printf "${index_t} ${RED}%s${RESET}\n" \
    "[q]" \
    "Cancel"
}

#==============================================================================
# COMMAND: MODULES
#==============================================================================
#   __  __           _       _
#  |  \/  | ___   __| |_   _| | ___  ___
#  | |\/| |/ _ \ / _` | | | | |/ _ \/ __|
#  | |  | | (_) | (_| | |_| | |  __/\__ \
#  |_|  |_|\___/ \__,_|\__,_|_|\___||___/
#
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__MODULES" \
  "dm_cli__modules" \
  "Lists all detected modules by default. In the list there is an assigned index for each module that can be used as a parameter to show the given module details."
dm_cli__modules() {
  echo ""
  if [ "$#" = "0" ]
  then
    _dm_cli__list_modules | _dm_cli__utils__indent
  else
    index="$1"
    _dm_cli__show_module "$index"
  fi
  echo ""
}

_dm_cli__list_modules() {
  echo "${BLUE}These are the modules available in your configuration. You can select a module by appending its index to the modules command like m|modules 42.${RESET}" | fmt --split-only --width="80"
  echo ""

  index=1

  index_width="$(dm_lib__modules__get_width__index)"
  name_width="$(dm_lib__modules__get_width__name)"
  version_width="$(dm_lib__modules__get_width__version)"
  status_width="$(dm_lib__modules__get_width__status)"

  # Offsetting the width to have a more spacy display.
  index_width="$((index_width + 3))"
  name_width="$((name_width + 1))"
  version_width="$((version_width + 1))"
  status_width="$((status_width + 1))"

  # Templates for the formatting.
  index_t="${DIM}%-${index_width}s${RESET}"
  name_t="${BOLD}%-${name_width}s${RESET}"
  version_t="%-${version_width}s"
  status_t="${BOLD}${GREEN}%-${status_width}s${RESET}"
  path_t="%s"

  modules=$(dm_lib__modules__list)
  for module in $modules
  do
    index_value="[${index}]"
    name_value="$(dm_lib__modules__get_name "$module")"
    version_value="$(dm_lib__modules__get_version "$module")"
    status_value="$(dm_lib__modules__get_status "$module")"
    path_value="$module"

    # shellcheck disable=SC2059
    printf "${index_t} ${name_t} ${version_t} ${status_t} ${path_t}\n" \
      "$index_value" \
      "$name_value" \
      "$version_value" \
      "$status_value" \
      "$path_value"

    index=$((index + 1))
  done
}

_dm_cli__show_module__prepare_links() {
  module="$1"
  dm_lib__debug "_dm_cli__show_module__prepare_links" \
    "preparing link display for module '${module}'"

  dm_lib__config__get_links "$module" | while read -r link_string
  do
    dm_lib__debug "_dm_cli__show_module__prepare_links" \
      "processing link_string '${link_string}'"

    processed_link="$(_dm_lib__links__preprocess_raw_link_string "$module" "$link_string")"
    target_path="${processed_link%% *}"  # getting the first element from the list
    link_name="${processed_link#* }"  # getting all items but the first

    dm_lib__debug "_dm_cli__show_module__prepare_links" \
      "target_path '${target_path}'"
    dm_lib__debug "_dm_cli__show_module__prepare_links" \
      "link_name '${link_name}'"

    result="$(_dm_lib__links__check_link "$target_path" "$link_name")"

    if [ "$result" = "$DM__GLOBAL__CONFIG__LINK__NOT_EXISTS" ]
    then
      prefix="[${BOLD}${RED}link${RESET}|${BOLD}${RED}target${RESET}]"
    elif [ "$result" = "$DM__GLOBAL__CONFIG__LINK__EXISTS_BUT_TARGET_MISMATCH" ]
    then
      prefix="[${BOLD}${GREEN}link${RESET}|${BOLD}${RED}target${RESET}]"
    elif [ "$result" = "$DM__GLOBAL__CONFIG__LINK__EXISTS_WITH_TARGET" ]
    then
      prefix="[${BOLD}${GREEN}link${RESET}|${BOLD}${GREEN}target${RESET}]"
    else
      :
    fi
    echo "${prefix} ${link_string}"
  done
}

_dm_cli__show_module() {
  selected_index="$1"

  if module="$(dm_lib__modules__module_for_index "$selected_index")"
  then
    :
  else
    module_count="$(dm_lib__modules__list | wc -l)"
    echo "${RED}Invalid module index! Should be in range 1-${module_count}.${RESET}" | \
      _dm_cli__utils__indent
    return
  fi

  dm_lib__debug "_dm_cli__show_module" "module selected: '${module}'"

  name="$(dm_lib__config__get_name "$module")"
  version="$(dm_lib__config__get_version "$module")"
  status="deployed"
  docs="$(dm_lib__config__get_docs "$module")"
  variables="$(dm_lib__config__get_variables "$module" | sort)"
  hooks="$(dm_lib__hooks__get_hooks_for_module "$module")"

  links="$(_dm_cli__show_module__prepare_links "$module")"

  name="${BOLD}${name}${RESET}"
  version="${version}"
  status="${BOLD}${GREEN}${status}${RESET}"
  path="$(readlink -f "${module}")"

  header_padding="10"
  format="${DIM}%${header_padding}s${RESET} %s\n"

  _dm_cli__utils__header_multiline "$header_padding" "$format" "Name" "$name"
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Version" "$version"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Status" "$status"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Docs" "$docs"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Path" "$path"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Variables" "$variables" "${BOLD}"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Links" "$links"
  echo ""
  _dm_cli__utils__header_multiline "$header_padding" "$format" "Hooks" "$hooks" "${BOLD}"

  if [ "$DM__GLOBAL__CONFIG__CLI__WARNING__WRAPPED_DOCS" -eq "0" ]
  then
    dm_lib__debug "_dm_cli__show_module" "ignoring warning about line wrapping"
    return
  fi

  wrap_limit="$((DM__GLOBAL__CONFIG__CLI__TEXT_WRAP_LIMIT - header_padding))"

  if [ "$(echo "$docs" | wc --max-line-length)" -gt "$wrap_limit" ]
  then
    echo ""
    format="${DIM}${YELLOW}%${header_padding}s${RESET} ${DIM}%s${RESET}\n"

    _dm_cli__utils__header_multiline \
      "$header_padding" \
      "$format" \
      "Warning" \
      "$DM__GLOBAL__WARNING__MODULE_DOC_WRAPPING"
  fi
}

#==============================================================================
# COMMAND: DEPLOY
#==============================================================================
#   ____             _
#  |  _ \  ___ _ __ | | ___  _   _
#  | | | |/ _ \ '_ \| |/ _ \| | | |
#  | |_| |  __/ |_) | | (_) | |_| |
#  |____/ \___| .__/|_|\___/ \__, |
#             |_|            |___/
#==============================================================================

dm_cli__register_command \
  "$DM__GLOBAL__CONFIG__CLI__COMMAND_HOTKEYS__DEPLOY" \
  "dm_cli__deploy" \
  "Deploys all modules. If an index is provided as a parameter, then only the given modules gets deployed."
dm_cli__deploy() {
  echo ""
  if [ "$#" = "0" ]
  then
    dm_lib__debug "dm_cli__deploy" "deploying all modules"
    _dm_cli__deploy_all
  else
    index="$1"
    dm_lib__debug "dm_cli__deploy" "deploying module for index '$index'"
    _dm_cli__deploy_single "$index"
  fi
  echo ""
}

_dm_cli__deploy_all() {
  :
}

_dm_cli__deploy_single() {
  selected_index="$1"
  if module="$(dm_lib__modules__module_for_index "$selected_index")"
  then
    :
  else
    module_count="$(dm_lib__modules__list | wc -l)"
    echo "${RED}Invalid module index! Should be in the range of [1-${module_count}].${RESET}" | _dm_cli__utils__indent
    return
  fi

  dm_lib__deploy__deploy_module "$module" | _dm_cli__utils__indent
}

#==============================================================================
# DM ENTRY POINT
#==============================================================================
#   ______       _                            _       _
#  |  ____|     | |                          (_)     | |
#  | |__   _ __ | |_ _ __ _   _   _ __   ___  _ _ __ | |_
#  |  __| | '_ \| __| '__| | | | | '_ \ / _ \| | '_ \| __|
#  | |____| | | | |_| |  | |_| | | |_) | (_) | | | | | |_
#  |______|_| |_|\__|_|   \__, | | .__/ \___/|_|_| |_|\__|
#                          __/ | | |
#=========================|___/==|_|===========================================

dm_cli__init
dm_cli__start_interpreter
